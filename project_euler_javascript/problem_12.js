/*
The sequence of triangle numbers is generated by adding the natural numbers. 
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
*/

var memoize = function(func){
  var previous = {};
  return function(num){
    if ( previous.hasOwnProperty(num) ){
      return previous[num];
    }
    var result = func(num);
    previous[num] = result;
    return result;
  };
};

var primeFactorsRecursive = function(num, div, result){
  if ( result === undefined ){
    result = {};
  }
  if ( div === undefined ){
    div = 2;
  }

  if (num === 1){
    return result;
  }

  if ( num % div === 0 ){
    result[div] === undefined ? result[div] = 1 : result[div]+=1;
    return primeFactors(num/=div, div, result);
  }
  return primeFactors(num, div+1, result);
};


var primeFactorsIterative = function(num){
  var result = {};
  var div = 2;
  while(num > 1){
    if (num % div === 0){
      result[div] === undefined ? result[div] = 1 : result[div]+=1;
      num /= div;
    } else {
      div++;
    }
  }
  return result;
};

var combinations = function(obj){
  var result = 1;
  var keys = Object.keys(obj);
  for (var i = 0; i < keys.length; i++){
    result *= obj[keys[i]]+1;
  }
  return result;
};

var triangleNumber = function(num){
  return (num*(num+1))/2;
};

var found = false;
var target = 500;
var num = 1;
var tnum;
while (!found){
  tnum = triangleNumber(num);
  if(combinations(primeFactorsIterative(tnum)) > target){
    found = true;
  } else {
    num++;
  }
}

console.log(tnum);








